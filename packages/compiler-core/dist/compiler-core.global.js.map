{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { NodeTypes } from \"./ast\";\n\n/**\u521B\u5EFA\u89E3\u6790\u4E0A\u4E0B\u6587 */\nfunction createParserContext(template){\n  return {\n    line:1,//\u5F53\u524D\u89E3\u6790\u5230\u7684\u884C\u6570\n    column:1,//\u5F53\u524D\u89E3\u6790\u5230\u5217\u6570\n    offset:0,//\u504F\u79FB\u91CF\n    source:template,//\u8FD9\u4E2A\u5B57\u6BB5\u4F1A\u88AB\u4E0D\u65AD\u526A\u5207 slice\n    originalSource:template//\u539F\u59CB\u6570\u636E\n  }\n}\n\n/**\u89E3\u6790\u662F\u5426\u7ED3\u675F */\nfunction isEnd(context){\n  const source = context.source\n  return !source\n}\n\nfunction getCursor(context){\n  let {line,column,offset} = context;\n  return {line,column,offset};\n}\n\n/**\u66F4\u65B0\u6700\u65B0\u7684\u884C\u3001\u5217\u3001\u504F\u79FB\u91CF\u4FE1\u606F */\nfunction advancePositionWithMutation(context,source,endIndex){\n  let linesCount = 0;//\u884C\u6570\n  let linePos = -1;\n\n  for(let i = 0;i < endIndex;i++){\n    //\u56DE\u8F66\u7684 ascii \u7801\u662F 10\n    if(source.charCodeAt(i) == 10){\n      linesCount++;\n      linePos = i;\n    }\n  }\n\n  context.line += linesCount;\n  context.column = linePos === -1 ? context.column + endIndex : endIndex - linePos;\n  context.offset += endIndex;\n}\n\n/**\u622A\u53D6\u548C\u66F4\u65B0\u5185\u5BB9 */\nfunction advanceBy(context,endIndex) {\n  //\u6BCF\u6B21\u5220\u9664\u5185\u5BB9\u7684\u65F6\u5019\u90FD\u8981\u66F4\u65B0\u6700\u65B0\u7684\u884C\u3001\u5217\u3001\u504F\u79FB\u91CF\u4FE1\u606F\n  let source = context.source\n  advancePositionWithMutation(context,source,endIndex);\n\n  context.source = source.slice(endIndex);\n}\n\n/**\u5904\u7406\u6587\u672C */\nfunction parseTextData(context,endIndex){\n  const rawText = context.source.slice(0,endIndex);\n  advanceBy(context,endIndex);\n  return rawText;\n}\n\nfunction getSelection(context,start,end?){\n  end = end || getCursor(context);\n  return {\n    start,\n    end,\n    source:context.originalSource.slice(start.offset,end.offset)\n  }\n}\n\n/**\u89E3\u6790\u6587\u672C */\nfunction parseText(context){\n  // \u5728\u89E3\u6790\u6587\u672C\u7684\u65F6\u5019\u8981\u770B\u540E\u9762\u5230\u90A3\u91CC\u7ED3\u675F\uFF0Cabc {{x}} <a></a>\n  let endTokens = ['<','{{'];\n  let endIndex = context.source.length;//\u9ED8\u8BA4\u5230\u6700\u540E\u7ED3\u675F\n  for(let i = 0;i < endTokens.length;i++){\n    let index = context.source.indexOf(endTokens[i]);\n    if(index !== -1 && endIndex > index){\n      endIndex = index;\n    }\n  }\n\n  // \u521B\u5EFA\u884C\u5217\u4FE1\u606F\n\n  // \u5F00\u59CB\u6570\u636E\n  const start = getCursor(context);\n  // \u622A\u53D6\u5185\u5BB9\n  const content = parseTextData(context,endIndex);\n  \n  return {\n    type:NodeTypes.TEXT,\n    content:content,\n    loc:getSelection(context,start),//\u4F4D\u7F6E\u4FE1\u606F\n  }\n}\n\n/**\u5C06\u6A21\u7248\u8F6C\u6210\u62BD\u8C61\u8BED\u6CD5\u6811 */\nfunction parse(template) {\n\n  // \u89E3\u6790\u89C4\u5219\u5C31\u662F\u4E00\u4E2A\u4E2A\u5B57\u7B26\u8FDB\u884C\u5224\u65AD\uFF0C\u5E76\u4E14\u89E3\u6790\u5B8C\u6BD5\u540E\u5220\u9664\u5DF2\u7ECF\u89E3\u6790\u8FC7\u7684\u5B57\u7B26\u4E32\n\n  // \u521B\u5EFA\u4E00\u4E2A\u89E3\u6790\u4E0A\u4E0B\u6587\uFF08\u89E3\u6790\u4F4D\u7F6E\u6807\u8BB0\u7B49\uFF09\u6765\u8FDB\u884C\u5904\u7406\n  const context = createParserContext(template);\n\n  /**\n   * \u5185\u5BB9\u60C5\u51B5\n   * 1. <  :\u5143\u7D20\n   * 2. {{}} :\u8868\u8FBE\u5F0F\n   * 3. \u5176\u4ED6\u60C5\u51B5 :\u6587\u672C\n   */\n  const nodes = [];\n  while(!isEnd(context)){\n    const source = context.source;\n    let node;\n    if(source.startsWith(\"{{\")){//\u8868\u8FBE\u5F0F\n    \n    }else if(source[0] == \"<\"){//\u5143\u7D20\n    \n    }\n    if(!node){//\u6587\u672C\n      node = parseText(context);\n    }\n    nodes.push(node);\n    console.log(nodes);\n    break;\n  }\n  \n}\n\n/**\u89E3\u6790\u6A21\u7248\n * @param template \u6A21\u7248\u5B57\u7B26\u4E32\n */\nexport function compiler(template){\n  //\u5C06\u6A21\u7248\u8F6C\u6210\u62BD\u8C61\u8BED\u6CD5\u6811\n  const ast = parse(template);//\u8FD9\u91CC\u9700\u8981\u5C06html\u8BED\u6CD5\u8F6C\u5316\u6210js\u8BED\u6CD5\u2014\u2014\u7F16\u8BD1\u539F\u7406\n\n  // //\u5BF9ast\u8BED\u6CD5\u6811\u8FDB\u884C\u4E00\u4E9B\u9884\u5904\u7406\n  // transform(ast);//\u4F1A\u751F\u6210\u4E00\u4E9B\u4FE1\u606F\n\n  // //\u4EE3\u7801\u751F\u6210\n  // return generate(ast);//\u6700\u7EC8\u751F\u6210\u4EE3\u7801 \u548Cvue2\u4E00\u6837\n\n  return ast;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAGA,WAAS,oBAAoB,UAAS;AACpC,WAAO;AAAA,MACL,MAAK;AAAA,MACL,QAAO;AAAA,MACP,QAAO;AAAA,MACP,QAAO;AAAA,MACP,gBAAe;AAAA,IACjB;AAAA,EACF;AAGA,WAAS,MAAM,SAAQ;AACrB,UAAM,SAAS,QAAQ;AACvB,WAAO,CAAC;AAAA,EACV;AAEA,WAAS,UAAU,SAAQ;AACzB,QAAI,EAAC,MAAK,QAAO,OAAM,IAAI;AAC3B,WAAO,EAAC,MAAK,QAAO,OAAM;AAAA,EAC5B;AAGA,WAAS,4BAA4B,SAAQ,QAAO,UAAS;AAC3D,QAAI,aAAa;AACjB,QAAI,UAAU;AAEd,aAAQ,IAAI,GAAE,IAAI,UAAS,KAAI;AAE7B,UAAG,OAAO,WAAW,CAAC,KAAK,IAAG;AAC5B;AACA,kBAAU;AAAA,MACZ;AAAA,IACF;AAEA,YAAQ,QAAQ;AAChB,YAAQ,SAAS,YAAY,KAAK,QAAQ,SAAS,WAAW,WAAW;AACzE,YAAQ,UAAU;AAAA,EACpB;AAGA,WAAS,UAAU,SAAQ,UAAU;AAEnC,QAAI,SAAS,QAAQ;AACrB,gCAA4B,SAAQ,QAAO,QAAQ;AAEnD,YAAQ,SAAS,OAAO,MAAM,QAAQ;AAAA,EACxC;AAGA,WAAS,cAAc,SAAQ,UAAS;AACtC,UAAM,UAAU,QAAQ,OAAO,MAAM,GAAE,QAAQ;AAC/C,cAAU,SAAQ,QAAQ;AAC1B,WAAO;AAAA,EACT;AAEA,WAAS,aAAa,SAAQ,OAAM,KAAK;AACvC,UAAM,OAAO,UAAU,OAAO;AAC9B,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,QAAO,QAAQ,eAAe,MAAM,MAAM,QAAO,IAAI,MAAM;AAAA,IAC7D;AAAA,EACF;AAGA,WAAS,UAAU,SAAQ;AAEzB,QAAI,YAAY,CAAC,KAAI,IAAI;AACzB,QAAI,WAAW,QAAQ,OAAO;AAC9B,aAAQ,IAAI,GAAE,IAAI,UAAU,QAAO,KAAI;AACrC,UAAI,QAAQ,QAAQ,OAAO,QAAQ,UAAU,EAAE;AAC/C,UAAG,UAAU,MAAM,WAAW,OAAM;AAClC,mBAAW;AAAA,MACb;AAAA,IACF;AAKA,UAAM,QAAQ,UAAU,OAAO;AAE/B,UAAM,UAAU,cAAc,SAAQ,QAAQ;AAE9C,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,KAAI,aAAa,SAAQ,KAAK;AAAA,IAChC;AAAA,EACF;AAGA,WAAS,MAAM,UAAU;AAKvB,UAAM,UAAU,oBAAoB,QAAQ;AAQ5C,UAAM,QAAQ,CAAC;AACf,WAAM,CAAC,MAAM,OAAO,GAAE;AACpB,YAAM,SAAS,QAAQ;AACvB,UAAI;AACJ,UAAG,OAAO,WAAW,IAAI,GAAE;AAAA,MAE3B,WAAS,OAAO,MAAM,KAAI;AAAA,MAE1B;AACA,UAAG,CAAC,MAAK;AACP,eAAO,UAAU,OAAO;AAAA,MAC1B;AACA,YAAM,KAAK,IAAI;AACf,cAAQ,IAAI,KAAK;AACjB;AAAA,IACF;AAAA,EAEF;AAKO,WAAS,SAAS,UAAS;AAEhC,UAAM,MAAM,MAAM,QAAQ;AAQ1B,WAAO;AAAA,EACT;",
  "names": []
}
